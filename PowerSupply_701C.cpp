/*----- PROTECTED REGION ID(PowerSupply_701C.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        PowerSupply_701C.cpp
//
// description : C++ source for the PowerSupply_701C class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               PowerSupply_701C are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <PowerSupply_701C.h>
#include <PowerSupply_701CClass.h>

/*----- PROTECTED REGION END -----*/	//	PowerSupply_701C.cpp

/**
 *  PowerSupply_701C class description:
 *
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name    |  Method name
//================================================================
//  State           |  Inherited (no method)
//  Status          |  Inherited (no method)
//  ChargingOn      |  charging_on
//  ChargingOff     |  charging_off
//  CheckAdcOutput  |  check_adc_output
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//  Voltage  |  Tango::DevShort	Scalar
//================================================================

namespace PowerSupply_701C_ns
{
/*----- PROTECTED REGION ID(PowerSupply_701C::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : PowerSupply_701C::PowerSupply_701C()
 *	Description : Constructors for a Tango device
 *                implementing the classPowerSupply_701C
 */
//--------------------------------------------------------
PowerSupply_701C::PowerSupply_701C(Tango::DeviceClass *cl, string &s)
    : TANGO_BASE_CLASS(cl, s.c_str())
{
    /*----- PROTECTED REGION ID(PowerSupply_701C::constructor_1) ENABLED START -----*/
    init_device();

    /*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::constructor_1
}
//--------------------------------------------------------
PowerSupply_701C::PowerSupply_701C(Tango::DeviceClass *cl, const char *s)
    : TANGO_BASE_CLASS(cl, s)
{
    /*----- PROTECTED REGION ID(PowerSupply_701C::constructor_2) ENABLED START -----*/
    init_device();

    /*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::constructor_2
}
//--------------------------------------------------------
PowerSupply_701C::PowerSupply_701C(Tango::DeviceClass *cl, const char *s, const char *d)
    : TANGO_BASE_CLASS(cl, s, d)
{
    /*----- PROTECTED REGION ID(PowerSupply_701C::constructor_3) ENABLED START -----*/
    init_device();

    /*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : PowerSupply_701C::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void PowerSupply_701C::delete_device()
{
    //DEBUG_STREAM << "PowerSupply_701C::delete_device() " << device_name << endl;
    /*----- PROTECTED REGION ID(PowerSupply_701C::delete_device) ENABLED START -----*/

    //	Delete device allocated objects
    //elkin
    delete socketProxy;
    /*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::delete_device
    delete[] attr_Voltage_read;
}

//--------------------------------------------------------
/**
 *	Method      : PowerSupply_701C::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void PowerSupply_701C::init_device()
{
    //DEBUG_STREAM << "PowerSupply_701C::init_device() create device " << device_name << endl;
    /*----- PROTECTED REGION ID(PowerSupply_701C::init_device_before) ENABLED START -----*/

    //	Initialization before get_device_property() call

    /*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::init_device_before


    //	Get the device properties from database
    get_device_property();

    attr_Voltage_read = new Tango::DevShort[1];
    //	No longer if mandatory property not set.
    if (mandatoryNotDefined)
        return;

    /*----- PROTECTED REGION ID(PowerSupply_701C::init_device) ENABLED START -----*/

    //	Initialize device
    //elkin
    isExternalControl = false;
    isActive = false;
    isVoltageFromOutComp = false;
    isVoltageMatchesToGiven = false;

    set_state(Tango::ON);
    set_status("Device is ON");
    attr_Voltage_read[0] = 0;

    try {

        DEBUG_STREAM << "Socket:    " << socket << endl;

        socketProxy = new Tango::DeviceProxy(socket);
        socketProxy->command_inout("Init");

        checkSocketState();

        if (isSocketOn) pollState();

    } catch (Tango::DevFailed &e) {
        DEBUG_STREAM << "Can't connect to socket " << socket << endl;
        Tango::Except::print_exception(e);
        set_state(Tango::FAULT);
        set_status("Can't connect to socket " + socket);
    }

    /*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::init_device
}

//--------------------------------------------------------
/**
 *	Method      : PowerSupply_701C::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void PowerSupply_701C::get_device_property()
{
    /*----- PROTECTED REGION ID(PowerSupply_701C::get_device_property_before) ENABLED START -----*/

    //	Initialize property data members

    /*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::get_device_property_before

    mandatoryNotDefined = false;

    //	Read device properties from database.
    Tango::DbData	dev_prop;
    dev_prop.push_back(Tango::DbDatum("Socket"));

    //	is there at least one property to be read ?
    if (dev_prop.size()>0)
    {
        //	Call database and extract values
        if (Tango::Util::instance()->_UseDb==true)
            get_db_device()->get_property(dev_prop);

        //	get instance on PowerSupply_701CClass to get class property
        Tango::DbDatum	def_prop, cl_prop;
        PowerSupply_701CClass	*ds_class =
                (static_cast<PowerSupply_701CClass *>(get_device_class()));
        int	i = -1;

        //	Try to initialize Socket from class property
        cl_prop = ds_class->get_class_property(dev_prop[++i].name);
        if (cl_prop.is_empty()==false)	cl_prop  >>  socket;
        else {
            //	Try to initialize Socket from default device value
            def_prop = ds_class->get_default_device_property(dev_prop[i].name);
            if (def_prop.is_empty()==false)	def_prop  >>  socket;
        }
        //	And try to extract Socket value from database
        if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  socket;
        //	Property StartDsPath is mandatory, check if has been defined in database.
        check_mandatory_property(cl_prop, dev_prop[i]);

    }

    /*----- PROTECTED REGION ID(PowerSupply_701C::get_device_property_after) ENABLED START -----*/

    //	Check device property data members init

    /*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::get_device_property_after
}
//--------------------------------------------------------
/**
 *	Method      : PowerSupply_701C::check_mandatory_property()
 *	Description : For mandatory properties check if defined in database.
 */
//--------------------------------------------------------
void PowerSupply_701C::check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop)
{
    //	Check if all properties are empty
    if (class_prop.is_empty() && dev_prop.is_empty())
    {
        TangoSys_OMemStream	tms;
        tms << endl <<"Property \'" << dev_prop.name;
        if (Tango::Util::instance()->_UseDb==true)
            tms << "\' is mandatory but not defined in database";
        else
            tms << "\' is mandatory but cannot be defined without database";
        string	status(get_status());
        status += tms.str();
        set_status(status);
        mandatoryNotDefined = true;
        /*----- PROTECTED REGION ID(PowerSupply_701C::check_mandatory_property) ENABLED START -----*/
        cerr << tms.str() << " for " << device_name << endl;

        /*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::check_mandatory_property
    }
}


//--------------------------------------------------------
/**
 *	Method      : PowerSupply_701C::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void PowerSupply_701C::always_executed_hook()
{
    //DEBUG_STREAM << "PowerSupply_701C::always_executed_hook()  " << device_name << endl;
    if (mandatoryNotDefined)
    {
        string	status(get_status());
        Tango::Except::throw_exception(
                    (const char *)"PROPERTY_NOT_SET",
                    status.c_str(),
                    (const char *)"PowerSupply_701C::always_executed_hook()");
    }
    /*----- PROTECTED REGION ID(PowerSupply_701C::always_executed_hook) ENABLED START -----*/

    //	code always executed before all requests

    /*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : PowerSupply_701C::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void PowerSupply_701C::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
    //DEBUG_STREAM << "PowerSupply_701C::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
    /*----- PROTECTED REGION ID(PowerSupply_701C::read_attr_hardware) ENABLED START -----*/

    //	Add your own code

    /*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : PowerSupply_701C::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void PowerSupply_701C::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
    //DEBUG_STREAM << "PowerSupply_701C::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
    /*----- PROTECTED REGION ID(PowerSupply_701C::write_attr_hardware) ENABLED START -----*/

    //	Add your own code

    //elkin
    checkSocketState();

    if (!isSocketOn) {
        // //DEBUG_STREAM << "write_attr_hardware Socket error" << endl;
        Tango::Except::throw_exception((const char *) "Socket error", "Couldn't connect to socket " + socket, "Bad socket reply");
    } // throw ??????????

    pollState();

    /*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute Voltage related method
 *	Description:
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerSupply_701C::read_Voltage(Tango::Attribute &attr)
{
    //DEBUG_STREAM << "PowerSupply_701C::read_Voltage(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(PowerSupply_701C::read_Voltage) ENABLED START -----*/
    //	Set the attribute value
    attr.set_value(attr_Voltage_read);

    /*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::read_Voltage
}
//--------------------------------------------------------
/**
 *	Write attribute Voltage related method
 *	Description:
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerSupply_701C::write_Voltage(Tango::WAttribute &attr)
{
    //DEBUG_STREAM << "PowerSupply_701C::write_Voltage(Tango::WAttribute &attr) entering... " << endl;
    //	Retrieve write value
    Tango::DevShort	w_val;
    attr.get_write_value(w_val);
    /*----- PROTECTED REGION ID(PowerSupply_701C::write_Voltage) ENABLED START -----*/

    // from setvoltage
    //    checkSocketState();
    if (!isSocketOn)  return; // throw in write_attr_hardware ??????????

    //    pollState();

    // timeout?????? for device

    if (isActive && isExternalControl && isVoltageFromOutComp)
    {
        string reply,commandToPS,checkSumChr;

        //convert little-endian to big-endian
        Tango::DevShort writeVal = w_val;
        char* instVolt = reinterpret_cast<char*>(&writeVal);
        char tmp; tmp = instVolt[0];instVolt[0]= instVolt[1];instVolt[1]=tmp;

        commandToPS = "#4U" + writeVal; // big-endian ?????????

        checkSumChr = calcCheckSum(commandToPS);
        commandToPS += checkSumChr;

        reply = toSocketWriteAndRead(commandToPS);

        if (reply==OK) {
            voltage = w_val;
            *attr_Voltage_read = voltage;
            attr_Voltage_write = voltage;
        }

    } // from setvoltage
    else {
        if (!isActive) charging_on(); // ???????
        if (!isExternalControl) return; // ???? throw? FAULT or OFF
        if (!isVoltageFromOutComp) return; // ????? throw? FAULT or OFF
    }
    /*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::write_Voltage
}

//--------------------------------------------------------
/**
 *	Method      : PowerSupply_701C::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void PowerSupply_701C::add_dynamic_attributes()
{
    /*----- PROTECTED REGION ID(PowerSupply_701C::add_dynamic_attributes) ENABLED START -----*/

    //	Add your own code to create and add dynamic attributes if any

    /*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command ChargingOn related method
 *	Description: Switch on power supply
 *
 */
//--------------------------------------------------------
void PowerSupply_701C::charging_on()
{
    //DEBUG_STREAM << "PowerSupply_701C::ChargingOn()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(PowerSupply_701C::charging_on) ENABLED START -----*/

    //	Add your own code
    checkSocketState();
    if (!isSocketOn)  return; // ????????? throw ??? write_attr_hardware

    pollState();

    // timeout?????? for device

    chargingOnOrOff(CHARGINGONCOMM);

    /*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::charging_on
}
//--------------------------------------------------------
/**
 *	Command ChargingOff related method
 *	Description: Switch off power supply
 *
 */
//--------------------------------------------------------
void PowerSupply_701C::charging_off()
{
    //DEBUG_STREAM << "PowerSupply_701C::ChargingOff()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(PowerSupply_701C::charging_off) ENABLED START -----*/

    //	Add your own code
    checkSocketState();
    if (!isSocketOn)  return;

    pollState();

    // timeout?????? for device

    chargingOnOrOff(CHARGINGOFFCOMM);

    /*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::charging_off
}
//--------------------------------------------------------
/**
 *	Command CheckAdcOutput related method
 *	Description: Checking ADC output.
 *
 *	@returns Voltage on the capacitors
 */
//--------------------------------------------------------
Tango::DevShort PowerSupply_701C::check_adc_output()
{
    Tango::DevShort argout;
    //DEBUG_STREAM << "PowerSupply_701C::CheckAdcOutput()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(PowerSupply_701C::check_adc_output) ENABLED START -----*/

    //	Add your own code
    checkSocketState();
    if (!isSocketOn)  return -1;

    pollState();

    // timeout?????? for device

    try {
        if (isActive && isExternalControl && isVoltageFromOutComp)
        {
            string reply = toSocketWriteAndRead(OUTPUTADC);

            if (reply.size()<2) {
                DEBUG_STREAM << "Reply is incorrect " << endl;
                set_state(Tango::FAULT);
                set_status("Reply is incorrect");
                return -1;
            }

            string stateStr = {reply[0],reply[1]};
            string replyVoltage;

            if (stateStr==OK)
            {
                Tango::DevShort outVoltage;
                char checkSum;
                std::copy(reply.begin()+2,reply.end(),std::back_inserter(replyVoltage));

                if (replyVoltage.size()<6) {
                    DEBUG_STREAM << "Reply is incorrect " << endl;
                    set_state(Tango::FAULT);
                    set_status("Reply is incorrect");
                    return -1;
                }
                if (replyVoltage[0]='!')
                {
                    checkSum = calcCheckSum(replyVoltage.substr(0,5));
                    if (checkSum != replyVoltage[5])
                    {
                        DEBUG_STREAM << "Checksum of reply is incorrect " << endl;
                        set_state(Tango::FAULT);
                        set_status("Checksum is incorrect");
                        return -1;
                    }

                    // ??????? big-endian ?????????
                    char* instVolt = reinterpret_cast<char*>(&outVoltage);
                    instVolt[0]=replyVoltage[0];
                    instVolt[1]=replyVoltage[1];
                    argout = outVoltage;
                }
            }
            else if (reply[0]=='E')
            {
                // process
                errorReply(stateStr);
                return -1;
            }
        }
    }  catch (Tango::DevFailed &e) {
        DEBUG_STREAM << "pollState() - ConnectionFailed " << endl;
        Tango::Except::print_exception(e);
        set_state(Tango::FAULT);
        set_status("Can't connect to socket " + socket);
        return -1;
    }

    /*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::check_adc_output
    return argout;
}
//--------------------------------------------------------
/**
 *	Method      : PowerSupply_701C::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void PowerSupply_701C::add_dynamic_commands()
{
    /*----- PROTECTED REGION ID(PowerSupply_701C::add_dynamic_commands) ENABLED START -----*/

    //	Add your own code to create and add dynamic commands if any

    /*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::add_dynamic_commands
}

/*----- PROTECTED REGION ID(PowerSupply_701C::namespace_ending) ENABLED START -----*/

//	Additional Methods

char PowerSupply_701C::calcCheckSum(string bytes)
{
    //short size = bytes.size();
    char sum{0};
    for (auto& i: bytes) sum += i;
    return sum;
}

void PowerSupply_701C::pollState()
{
    try
    {
        DEBUG_STREAM << "pollState()" <<  endl;
        socketProxy->ping();

        string reply,replyStatus;

        reply = toSocketWriteAndRead(POLLSTATE);

        if (reply.size()<2) {
            DEBUG_STREAM << "Reply is incorrect " << endl;
            set_state(Tango::FAULT);
            set_status("Reply is incorrect");
            return;
        }

        DEBUG_STREAM << "pollState_Reply:" << reply << endl;
        char errorbyte,statebyte;
        DEBUG_STREAM << "Request size: " << reply.size() << endl;

        string stateStr = {reply[0],reply[1]};
        if (stateStr==OK)
        {
            char checkSum;
            std::copy(reply.begin()+2,reply.end(),std::back_inserter(replyStatus));

            if (replyStatus.size()<6) {
                DEBUG_STREAM << "Reply is incorrect " << endl;
                set_state(Tango::FAULT);
                set_status("Reply is incorrect");
                return;
            }
            if (replyStatus[0]='!')
            {
                checkSum = calcCheckSum(replyStatus.substr(0,5));
                if (checkSum != replyStatus[5])
                {
                    DEBUG_STREAM << "Checksum of reply is incorrect " << endl;
                    set_state(Tango::FAULT);
                    set_status("Checksum is incorrect");
                    return;
                }
                // check if byte3 of reply is 'E' ????

                statebyte = replyStatus[3];
                errorbyte = replyStatus[4];
                // ????????????????????? check statebyte & errorbyte
                checkStateByte(statebyte);
                checkErrorByte(errorbyte);
            }
        }
        else if (reply[0]=='E')
        {
            // process
            errorReply(stateStr);
        }
    }
    catch (Tango::DevFailed &e)
    {
        DEBUG_STREAM << "pollState() - ConnectionFailed " << endl;
        Tango::Except::print_exception(e);
        set_state(Tango::FAULT);
        set_status("Can't connect to socket " + socket);
    }
}

void PowerSupply_701C::errorReply(string ERROR)
{
    if (ERROR==ERR0) {
        set_state(Tango::FAULT);
        set_status("Checksum error (Input command) ");
        return;
    }
    if (ERROR==ERR1) {
        set_state(Tango::FAULT);
        set_status("Format error. Broken command structure (Input command) ");
        return;
    }
    if (ERROR==ERR2) {
        set_state(Tango::FAULT);
        set_status("Unknown command (Input command) ");
        return;
    }
    if (ERROR==ERR3) {
        set_state(Tango::FAULT);
        set_status("Exceeding the allowable value for voltage (max=500V) (Input command) ");
        return;
    }
    if (ERROR==ERR4) {
        set_state(Tango::FAULT);
        set_status("Command can not be executed ");
    }
}

void PowerSupply_701C::checkSocketState()
{
    Tango::DevState stateSocket;
    Tango::DeviceData outputCom;

    try {
        outputCom = socketProxy->command_inout("State");
        outputCom >> stateSocket;

        if (stateSocket==Tango::OFF)
        {
            DEBUG_STREAM << " Socket " << socket << " is OFF" << endl;
            isSocketOn = false;
            set_state(Tango::OFF);
            set_status("Device is OFF");
        }
        else if (stateSocket==Tango::ON) {
            DEBUG_STREAM << " Socket " << socket << " is ON" << endl;
            isSocketOn = true;
            set_state(Tango::ON);
            set_status("Device is ON");
        }
    } catch (Tango::DevFailed &e) {
        Tango::Except::print_exception(e);
        set_state(Tango::FAULT);
        set_status("Can't connect to socket " + socket);
    }
}

void PowerSupply_701C::checkErrorByte(char byte)
{
    // ????????????????????? check errorbyte
}

void PowerSupply_701C::checkStateByte(char byte)
{
    isExternalControl = (1) & byte;
    isActive = (1 << 1) & byte;
    isVoltageMatchesToGiven =  (1 << 3) & byte;
    isVoltageFromOutComp = (1 << 6) & byte;
}

string PowerSupply_701C::toSocketWriteAndRead(string command)
{
    Tango::DeviceData input, output;
    string reply;

    try {
        input << command;
        output = socketProxy->command_inout("WriteAndRead",input);

        output >> reply;
    } catch (Tango::DevFailed &e) {
        Tango::Except::print_exception(e);
        reply = "?";
    }
    return reply;
}

void PowerSupply_701C::chargingOnOrOff(string command)
{
    try {
        if (isActive && isExternalControl)
        {
            string reply;
            reply = toSocketWriteAndRead(command);
            if (reply==OK) {
                if (command==CHARGINGOFFCOMM) {
                    DEBUG_STREAM << " Charging OFF " << endl;
                    isActive = false;
                }
                if (command==CHARGINGONCOMM) {
                    DEBUG_STREAM << " Charging ON " << endl;
                    isActive = true;
                }

            }
            else if (reply[0]=='E')
            {
                if (reply.size()==2) errorReply(reply);
                if (reply.size()>2) errorReply(reply.substr(0,2));
                if (reply.size()<2) {
                    set_state(Tango::FAULT);
                    set_status("Incorrect reply of Device");
                }
            }
        }
    } catch (Tango::DevFailed &e) {
        Tango::Except::print_exception(e);
        set_state(Tango::FAULT);
        set_status("Can't connect to socket " + socket);
    }
}


/*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::namespace_ending
} //	namespace
