/*----- PROTECTED REGION ID(PowerSupply_701C.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        PowerSupply_701C.cpp
//
// description : C++ source for the PowerSupply_701C class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               PowerSupply_701C are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <PowerSupply_701C.h>
#include <PowerSupply_701CClass.h>

/*----- PROTECTED REGION END -----*/	//	PowerSupply_701C.cpp

/**
 *  PowerSupply_701C class description:
 *    
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name    |  Method name
//================================================================
//  State           |  Inherited (no method)
//  Status          |  Inherited (no method)
//  ChargingOn      |  charging_on
//  ChargingOff     |  charging_off
//  SetVoltage      |  set_voltage
//  CheckAdcOutput  |  check_adc_output
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//  Voltage  |  Tango::DevShort	Scalar
//================================================================

namespace PowerSupply_701C_ns
{
/*----- PROTECTED REGION ID(PowerSupply_701C::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : PowerSupply_701C::PowerSupply_701C()
 *	Description : Constructors for a Tango device
 *                implementing the classPowerSupply_701C
 */
//--------------------------------------------------------
PowerSupply_701C::PowerSupply_701C(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(PowerSupply_701C::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::constructor_1
}
//--------------------------------------------------------
PowerSupply_701C::PowerSupply_701C(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(PowerSupply_701C::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::constructor_2
}
//--------------------------------------------------------
PowerSupply_701C::PowerSupply_701C(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(PowerSupply_701C::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : PowerSupply_701C::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void PowerSupply_701C::delete_device()
{
	DEBUG_STREAM << "PowerSupply_701C::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerSupply_701C::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::delete_device
	delete[] attr_Voltage_read;
}

//--------------------------------------------------------
/**
 *	Method      : PowerSupply_701C::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void PowerSupply_701C::init_device()
{
	DEBUG_STREAM << "PowerSupply_701C::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerSupply_701C::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::init_device_before
	
	//	Get the device properties from database
	get_device_property();
	
	attr_Voltage_read = new Tango::DevShort[1];
	//	No longer if mandatory property not set. 
	if (mandatoryNotDefined)
		return;

	/*----- PROTECTED REGION ID(PowerSupply_701C::init_device) ENABLED START -----*/
	
	//	Initialize device
    //elkin
    try {
        DEBUG_STREAM << "Socket:    " << socket << endl;
        socketProxy = new Tango::DeviceProxy(socket);
        socketProxy->command_inout("Init");
    } catch (Tango::DevFailed &e) {
        Tango::Except::print_exception(e);
        set_state(Tango::FAULT);
        set_status("Can't connect to socket " + socket);
    }
	
	/*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::init_device
}

//--------------------------------------------------------
/**
 *	Method      : PowerSupply_701C::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void PowerSupply_701C::get_device_property()
{
	/*----- PROTECTED REGION ID(PowerSupply_701C::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
    //elkin
    socket = "sock/pssocket/1";
	
	/*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::get_device_property_before

	mandatoryNotDefined = false;

	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("Socket"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on PowerSupply_701CClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		PowerSupply_701CClass	*ds_class =
			(static_cast<PowerSupply_701CClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize Socket from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  socket;
		else {
			//	Try to initialize Socket from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  socket;
		}
		//	And try to extract Socket value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  socket;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

	}

	/*----- PROTECTED REGION ID(PowerSupply_701C::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::get_device_property_after
}
//--------------------------------------------------------
/**
 *	Method      : PowerSupply_701C::check_mandatory_property()
 *	Description : For mandatory properties check if defined in database.
 */
//--------------------------------------------------------
void PowerSupply_701C::check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop)
{
	//	Check if all properties are empty
	if (class_prop.is_empty() && dev_prop.is_empty())
	{
		TangoSys_OMemStream	tms;
		tms << endl <<"Property \'" << dev_prop.name;
		if (Tango::Util::instance()->_UseDb==true)
			tms << "\' is mandatory but not defined in database";
		else
			tms << "\' is mandatory but cannot be defined without database";
		string	status(get_status());
		status += tms.str();
		set_status(status);
		mandatoryNotDefined = true;
		/*----- PROTECTED REGION ID(PowerSupply_701C::check_mandatory_property) ENABLED START -----*/
		cerr << tms.str() << " for " << device_name << endl;
		
		/*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::check_mandatory_property
	}
}


//--------------------------------------------------------
/**
 *	Method      : PowerSupply_701C::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void PowerSupply_701C::always_executed_hook()
{
	DEBUG_STREAM << "PowerSupply_701C::always_executed_hook()  " << device_name << endl;
	if (mandatoryNotDefined)
	{
		string	status(get_status());
		Tango::Except::throw_exception(
					(const char *)"PROPERTY_NOT_SET",
					status.c_str(),
					(const char *)"PowerSupply_701C::always_executed_hook()");
	}
	/*----- PROTECTED REGION ID(PowerSupply_701C::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : PowerSupply_701C::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void PowerSupply_701C::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "PowerSupply_701C::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerSupply_701C::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : PowerSupply_701C::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void PowerSupply_701C::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "PowerSupply_701C::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerSupply_701C::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute Voltage related method
 *	Description: 
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerSupply_701C::read_Voltage(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerSupply_701C::read_Voltage(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerSupply_701C::read_Voltage) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Voltage_read);
	
	/*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::read_Voltage
}
//--------------------------------------------------------
/**
 *	Write attribute Voltage related method
 *	Description: 
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerSupply_701C::write_Voltage(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PowerSupply_701C::write_Voltage(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(PowerSupply_701C::write_Voltage) ENABLED START -----*/
    voltage = w_val;
    *attr_Voltage_read = voltage;
    attr_Voltage_write = voltage;


	/*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::write_Voltage
}

//--------------------------------------------------------
/**
 *	Method      : PowerSupply_701C::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void PowerSupply_701C::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(PowerSupply_701C::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command ChargingOn related method
 *	Description: Switch on power supply
 *
 */
//--------------------------------------------------------
void PowerSupply_701C::charging_on()
{
	DEBUG_STREAM << "PowerSupply_701C::ChargingOn()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerSupply_701C::charging_on) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::charging_on
}
//--------------------------------------------------------
/**
 *	Command ChargingOff related method
 *	Description: Switch off power supply
 *
 */
//--------------------------------------------------------
void PowerSupply_701C::charging_off()
{
	DEBUG_STREAM << "PowerSupply_701C::ChargingOff()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerSupply_701C::charging_off) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::charging_off
}
//--------------------------------------------------------
/**
 *	Command SetVoltage related method
 *	Description: Voltage setting. Input parameter is the new value, Output parameter is the old value
 *
 *	@param argin 
 *	@returns 
 */
//--------------------------------------------------------
Tango::DevShort PowerSupply_701C::set_voltage(Tango::DevShort argin)
{
	Tango::DevShort argout;
	DEBUG_STREAM << "PowerSupply_701C::SetVoltage()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerSupply_701C::set_voltage) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::set_voltage
	return argout;
}
//--------------------------------------------------------
/**
 *	Command CheckAdcOutput related method
 *	Description: Checking ADC output.
 *
 */
//--------------------------------------------------------
void PowerSupply_701C::check_adc_output()
{
	DEBUG_STREAM << "PowerSupply_701C::CheckAdcOutput()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerSupply_701C::check_adc_output) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::check_adc_output
}
//--------------------------------------------------------
/**
 *	Method      : PowerSupply_701C::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void PowerSupply_701C::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(PowerSupply_701C::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
    /*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::add_dynamic_commands
}

/*----- PROTECTED REGION ID(PowerSupply_701C::namespace_ending) ENABLED START -----*/

//	Additional Methods

char PowerSupply_701C::calcCheckSum(string bytes)
{
    //short size = bytes.size();
    char sum{0};
    for (auto& i: bytes) sum += i;
    return sum;
}

/*----- PROTECTED REGION END -----*/	//	PowerSupply_701C::namespace_ending
} //	namespace
